{"version":3,"sources":["redux/reducer/index.js","Display.js","Button.js","redux/actions.js","redux/actionTypes.js","Calculator.js","redux/store.js","serviceWorker.js","index.js"],"names":["initialState","input","output","calculator","state","action","oldInput","slice","console","log","type","push","length","evaluateExpression","newInput","String","value","isNaN","prevElem","includes","newLastElem","copyInput","result","shift","lastOp","secondLastOp","currentElem","eval","Display","id","this","props","React","Component","Button","onClick","add","multiply","subtract","divide","evaluate","clear","append","buttonsMap","Calculator","handleClick","warn","renderButton","connect","dispatch","bindActionCreators","createStore","rootReducer","Boolean","window","location","hostname","match","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.92160e5a.chunk.js","sourcesContent":["\nconst initialState = {\n    input: [], \n    output: 0\n}\n\nconst calculator = (state = initialState , action) => {\n    let oldInput = state.input.slice();\n    console.log(state);\n    switch (action.type) {\n        case 'ADD':\n            oldInput.push('+');\n            return {\n                input: state.input.length === 0 ? [] : oldInput,\n                output: state.output,\n            }\n    \n        case 'SUBTRACT': \n            oldInput.push('-');\n            return {\n                input: state.input.length === 0  ? ['-'] : oldInput,\n                output: state.output,\n            }\n\n        case 'MULTIPLY': \n            oldInput.push('*');\n            return {\n                input: state.input.length === 0  ? [] : oldInput,\n                output: state.output,\n            }\n\n        case 'DIVIDE': \n            oldInput.push('/')\n            return {\n                input: state.input.length === 0 ? [] : oldInput,\n                output: state.output,\n            }\n\n        case 'EQUALS': \n            return {\n                input: state.input,\n                output: evaluateExpression(state.input),\n            }\n\n        case 'CLEAR': \n            return {\n                input: [],\n                output: 0,\n            }\n            \n            case 'APPEND': \n            let newInput;\n        \n            // case 1 : input is []\n            if (state.input === []) {\n                newInput = [String(action.value)];\n            }\n            // case 2: input previous element is not number nor decimal\n            else if (state.input[state.input.length - 1] !== \".\" && isNaN(state.input[state.input.length - 1]) === true ){\n                newInput = state.input.slice();\n                newInput.push(String(action.value));\n            }\n            // case 3: input previous element is a number or a decimal \n            else {\n                let prevElem = state.input[state.input.length - 1];\n                // invalid case : current element is decimal and there is already a decimal point\n                if (prevElem.includes('.') && action.value === '.') {\n                    return state;    \n                }\n                // invalid case : input previous element starts with 0 and current element is 0 \n                if (prevElem.length === 1 && prevElem[0] === '0' &&  action.value === 0){\n                    return state;\n                }\n    \n                let newLastElem = prevElem + String(action.value);\n                newInput = state.input.slice(0, state.input.length - 1);\n                newInput.push(newLastElem);\n            } \n            return {\n                input: newInput,\n                output: state.output,\n            }\n        \n        default:\n            return state;\n    }\n  }\n  \nconst evaluateExpression = (input) => {\n    let copyInput = input.slice();\n    if (copyInput.length === 0){\n        return '0';\n    }\n    let result = copyInput.shift();\n    let lastOp = null;\n    let secondLastOp = null;\n\n    while (copyInput.length !== 0){\n         let currentElem = copyInput.shift();\n         // Case 1: currentElem is a number\n         if (!isNaN(currentElem)){\n            if  (lastOp === '-'){\n                currentElem = '-1*' + currentElem;\n                if (secondLastOp === null) {\n                    result = String(eval(result + currentElem)); \n                }\n                else {\n                    result = String(eval(result + secondLastOp + currentElem)); \n                }\n\n            } else {\n                result = String(eval(result + lastOp + currentElem)); \n            }\n         }\n         // Case 2: currentElem is an operation\n         else {\n             secondLastOp = lastOp;\n             lastOp = currentElem;\n         }\n    }\n    return result \n}\n\nexport default calculator","import React from 'react';\n\n\nclass Display extends React.Component {\n    render () {\n        return (\n            <div id='display'>\n                <p>{this.props.input}</p>\n                <p>{this.props.output}</p>\n            </div>\n        );\n    }\n\n}\n\nexport default Display;","import React from 'react';\n\nclass Button extends React.Component{\n    render() {\n        return (\n            <button id={this.props.id} onClick={this.props.onClick}>\n                {this.props.value}\n            </button>\n        );\n    }\n}\n\nexport default Button;","import * as actionConstants from './actionTypes';\n\n\nexport const add = () => ({\n    type: actionConstants.ADD\n});\n\nexport const multiply = () => ({\n    type: actionConstants.MULTIPLY\n});\n\nexport const subtract= () => ({\n    type: actionConstants.SUBTRACT\n});\n\nexport const divide = () => ({\n    type: actionConstants.DIVIDE\n});\n\nexport const evaluate = () => ({\n    type: actionConstants.EQUALS\n});\n\nexport const clear = () => ({\n    type: actionConstants.CLEAR\n});\n\nexport const append = (id) => ({\n    type: actionConstants.APPEND,\n    value: id,\n});","export const ADD = 'ADD';\nexport const SUBTRACT = 'SUBTRACT';\nexport const MULTIPLY = 'MULTIPLY';\nexport const DIVIDE = 'DIVIDE';\nexport const EQUALS = 'EQUALS';\nexport const CLEAR = 'CLEAR';\nexport const APPEND = 'APPEND';\n","import React from 'react';\nimport Display from './Display';\nimport Button from './Button';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport {add, subtract, multiply, divide, evaluate, clear, append} from './redux/actions'\n\nconst buttonsMap = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9,\n    'add': '+',\n    'subtract': '-',\n    'multiply': '*',\n    'divide': '/',\n    'decimal': '.',\n    'equals': '=',\n    'clear': 'clear',\n};\n\nclass Calculator extends React.Component {\n\n    handleClick = (id) => {\n        // Do something when clicked\n        switch (id){\n            case 'add':\n                this.props.add();\n                break;\n            case 'subtract':\n                this.props.subtract();\n                break;\n            case 'multiply':\n                this.props.multiply();\n                break;\n            case 'divide':\n                this.props.divide();\n                break;\n            case 'equals':\n                this.props.evaluate();\n                break;\n            case 'clear':\n                this.props.clear();\n                break;\n            case 'zero': case 'one': case 'two': case 'three': case 'four': case 'five': \n            case 'six': case 'seven': case 'eight': case 'nine': case 'decimal':\n                this.props.append(buttonsMap[id]);\n                break;\n            default:\n                console.warn('Got unexpected id from click');\n\n        } \n    }\n\n    renderButton = (id) => {\n        return (\n            <Button \n                id={id} \n                value={buttonsMap[id]} \n                onClick={() => this.handleClick(id)}\n            />\n        );\n    }\n\n    render( ) {\n        return (\n            <div id='calculator-container'>\n            <Display \n                input={this.props.input} \n                output={this.props.output} />\n            {this.renderButton('clear')}\n\n            {this.renderButton('seven')}\n            {this.renderButton('eight')}\n            {this.renderButton('nine')}\n            {this.renderButton('divide')}\n\n            {this.renderButton('four')}\n            {this.renderButton('five')}\n            {this.renderButton('six')}\n            {this.renderButton('multiply')}\n\n            {this.renderButton('one')}\n            {this.renderButton('two')}\n            {this.renderButton('three')}\n            {this.renderButton('subtract')}\n\n            {this.renderButton('zero')}\n            {this.renderButton('decimal')}\n            {this.renderButton('equals')}\n            {this.renderButton('add')}\n\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => state\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({ add, subtract, multiply, divide, evaluate, clear, append }, dispatch);\n}\n\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(Calculator)\n  ","import { createStore } from \"redux\";\nimport rootReducer from \"./reducer\";\n\nexport default createStore(rootReducer);\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n\r\nimport Calculator from './Calculator';\r\nimport store from './redux/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n      <Calculator />\r\n    </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}