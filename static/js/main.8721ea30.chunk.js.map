{"version":3,"sources":["redux/reducer/index.js","Display.js","Button.js","redux/actions.js","redux/actionTypes.js","Calculator.js","redux/store.js","index.js"],"names":["initialState","input","output","calculator","state","action","oldInput","slice","console","log","type","push","length","evaluateExpression","newInput","String","value","isNaN","prevElem","includes","newLastElem","copyInput","result","shift","lastOp","secondLastOp","currentElem","eval","Display","id","this","props","React","Component","Button","onClick","add","multiply","subtract","divide","evaluate","clear","append","buttonsMap","Calculator","handleClick","warn","renderButton","class","connect","dispatch","bindActionCreators","createStore","rootReducer","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.8721ea30.chunk.js","sourcesContent":["\nconst initialState = {\n    input: [], \n    output: 0\n}\n\nconst calculator = (state = initialState , action) => {\n    let oldInput = state.input.slice();\n    console.log(state);\n    switch (action.type) {\n        case 'ADD':\n            oldInput.push('+');\n            return {\n                input: state.input.length === 0 ? [] : oldInput,\n                output: state.output,\n            }\n    \n        case 'SUBTRACT': \n            oldInput.push('-');\n            return {\n                input: state.input.length === 0  ? ['-'] : oldInput,\n                output: state.output,\n            }\n\n        case 'MULTIPLY': \n            oldInput.push('*');\n            return {\n                input: state.input.length === 0  ? [] : oldInput,\n                output: state.output,\n            }\n\n        case 'DIVIDE': \n            oldInput.push('/')\n            return {\n                input: state.input.length === 0 ? [] : oldInput,\n                output: state.output,\n            }\n\n        case 'EQUALS': \n            return {\n                input: state.input,\n                output: evaluateExpression(state.input),\n            }\n\n        case 'CLEAR': \n            return {\n                input: [],\n                output: 0,\n            }\n            \n            case 'APPEND': \n            let newInput;\n        \n            // case 1 : input is []\n            if (state.input === []) {\n                newInput = [String(action.value)];\n            }\n            // case 2: input previous element is not number nor decimal\n            else if (state.input[state.input.length - 1] !== \".\" && isNaN(state.input[state.input.length - 1]) === true ){\n                newInput = state.input.slice();\n                newInput.push(String(action.value));\n            }\n            // case 3: input previous element is a number or a decimal \n            else {\n                let prevElem = state.input[state.input.length - 1];\n                // invalid case : current element is decimal and there is already a decimal point\n                if (prevElem.includes('.') && action.value === '.') {\n                    return state;    \n                }\n                // invalid case : input previous element starts with 0 and current element is 0 \n                if (prevElem.length === 1 && prevElem[0] === '0' &&  action.value === 0){\n                    return state;\n                }\n    \n                let newLastElem = prevElem + String(action.value);\n                newInput = state.input.slice(0, state.input.length - 1);\n                newInput.push(newLastElem);\n            } \n            return {\n                input: newInput,\n                output: state.output,\n            }\n        \n        default:\n            return state;\n    }\n  }\n  \nconst evaluateExpression = (input) => {\n    let copyInput = input.slice();\n    if (copyInput.length === 0){\n        return '0';\n    }\n    let result = copyInput.shift();\n    let lastOp = null;\n    let secondLastOp = null;\n\n    while (copyInput.length !== 0){\n         let currentElem = copyInput.shift();\n         // Case 1: currentElem is a number\n         if (!isNaN(currentElem)){\n            if  (lastOp === '-'){\n                currentElem = '-1*' + currentElem;\n                if (secondLastOp === null) {\n                    result = String(eval(result + currentElem)); \n                }\n                else {\n                    result = String(eval(result + secondLastOp + currentElem)); \n                }\n\n            } else {\n                result = String(eval(result + lastOp + currentElem)); \n            }\n         }\n         // Case 2: currentElem is an operation\n         else {\n             secondLastOp = lastOp;\n             lastOp = currentElem;\n         }\n    }\n    return result \n}\n\nexport default calculator","import React from 'react';\nimport './Display.css';\n\nclass Display extends React.Component {\n    render () {\n        return (\n            <div id='display'>\n                <p id='input'>{this.props.input}</p>\n                <p id='output'>{this.props.output}</p>\n            </div>\n        );\n    }\n\n}\n\nexport default Display;","import React from 'react';\nimport './Button.css';\n\nclass Button extends React.Component{\n    render() {\n        return (\n            <button id={this.props.id} onClick={this.props.onClick}>\n                {this.props.value}\n            </button>\n        );\n    }\n}\n\nexport default Button;","import * as actionConstants from './actionTypes';\n\n\nexport const add = () => ({\n    type: actionConstants.ADD\n});\n\nexport const multiply = () => ({\n    type: actionConstants.MULTIPLY\n});\n\nexport const subtract= () => ({\n    type: actionConstants.SUBTRACT\n});\n\nexport const divide = () => ({\n    type: actionConstants.DIVIDE\n});\n\nexport const evaluate = () => ({\n    type: actionConstants.EQUALS\n});\n\nexport const clear = () => ({\n    type: actionConstants.CLEAR\n});\n\nexport const append = (id) => ({\n    type: actionConstants.APPEND,\n    value: id,\n});","export const ADD = 'ADD';\nexport const SUBTRACT = 'SUBTRACT';\nexport const MULTIPLY = 'MULTIPLY';\nexport const DIVIDE = 'DIVIDE';\nexport const EQUALS = 'EQUALS';\nexport const CLEAR = 'CLEAR';\nexport const APPEND = 'APPEND';\n","import React from 'react';\nimport Display from './Display';\nimport Button from './Button';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport {add, subtract, multiply, divide, evaluate, clear, append} from './redux/actions';\nimport './Calculator.css';\n\nconst buttonsMap = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9,\n    'add': '+',\n    'subtract': '-',\n    'multiply': '*',\n    'divide': '/',\n    'decimal': '.',\n    'equals': '=',\n    'clear': 'AC',\n};\n\nclass Calculator extends React.Component {\n\n    handleClick = (id) => {\n        switch (id){\n            case 'add':\n                this.props.add();\n                break;\n            case 'subtract':\n                this.props.subtract();\n                break;\n            case 'multiply':\n                this.props.multiply();\n                break;\n            case 'divide':\n                this.props.divide();\n                break;\n            case 'equals':\n                this.props.evaluate();\n                break;\n            case 'clear':\n                this.props.clear();\n                break;\n            case 'zero': case 'one': case 'two': case 'three': case 'four': case 'five': \n            case 'six': case 'seven': case 'eight': case 'nine': case 'decimal':\n                this.props.append(buttonsMap[id]);\n                break;\n            default:\n                console.warn('Got unexpected id from click');\n\n        } \n    }\n\n    renderButton = (id) => {\n        return (\n            <Button \n                id={id} \n                value={buttonsMap[id]} \n                onClick={() => this.handleClick(id)}\n            />\n        );\n    }\n\n    render( ) {\n        return (\n            <div id='calculator-container' class='container'>\n            <Display \n                input={this.props.input} \n                output={this.props.output} />\n            {this.renderButton('clear')}\n\n            {this.renderButton('seven')}\n            {this.renderButton('eight')}\n            {this.renderButton('nine')}\n            {this.renderButton('divide')}\n\n            {this.renderButton('four')}\n            {this.renderButton('five')}\n            {this.renderButton('six')}\n            {this.renderButton('multiply')}\n\n            {this.renderButton('one')}\n            {this.renderButton('two')}\n            {this.renderButton('three')}\n            {this.renderButton('subtract')}\n\n            {this.renderButton('zero')}\n            {this.renderButton('decimal')}\n            {this.renderButton('equals')}\n            {this.renderButton('add')}\n\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => state\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({ add, subtract, multiply, divide, evaluate, clear, append }, dispatch);\n}\n\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(Calculator)\n  ","import { createStore } from \"redux\";\nimport rootReducer from \"./reducer\";\n\nexport default createStore(rootReducer);\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n\r\nimport Calculator from './Calculator';\r\nimport store from './redux/store';\r\nimport { Provider } from 'react-redux';\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n      <Calculator />\r\n    </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}